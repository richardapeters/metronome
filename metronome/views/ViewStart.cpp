#include "metronome/views/ViewStart.hpp"
#include "preview/fonts/Fonts.hpp"
#include <numeric>

namespace application
{
    namespace
    {
        std::array<uint8_t, 32 * 28 / 8> startBitmapData = {
            0xf0, 0x00, 0x00, 0x00,
            0xfc, 0x00, 0x00, 0x00,
            0xff, 0x00, 0x00, 0x00,
            0xff, 0xc0, 0x00, 0x00,
            0xff, 0xf0, 0x00, 0x00,
            0xff, 0xfc, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00,
            0xff, 0xff, 0xc0, 0x00,
            0xff, 0xff, 0xf0, 0x00,
            0xff, 0xff, 0xfc, 0x00,
            0xff, 0xff, 0xff, 0x00,
            0xff, 0xff, 0xff, 0xc0,
            0xff, 0xff, 0xff, 0xf0,
            0xff, 0xff, 0xff, 0xfc,
            0xff, 0xff, 0xff, 0xfc,
            0xff, 0xff, 0xff, 0xf0,
            0xff, 0xff, 0xff, 0xc0,
            0xff, 0xff, 0xff, 0x00,
            0xff, 0xff, 0xfc, 0x00,
            0xff, 0xff, 0xf0, 0x00,
            0xff, 0xff, 0xc0, 0x00,
            0xff, 0xff, 0x00, 0x00,
            0xff, 0xfc, 0x00, 0x00,
            0xff, 0xf0, 0x00, 0x00,
            0xff, 0xc0, 0x00, 0x00,
            0xff, 0x00, 0x00, 0x00,
            0xfc, 0x00, 0x00, 0x00,
            0xf0, 0x00, 0x00, 0x00,
        };

        const infra::Bitmap startBitmap(startBitmapData, infra::Vector(32, 28), infra::PixelFormat::blackandwhite);

        std::array<uint8_t, 32 * 28 / 8> stopBitmapData = {
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0xf0, 0x00,
            0xff, 0xff, 0xf0, 0x00,
            0xff, 0xff, 0xf0, 0x00,
            0xff, 0xff, 0xf0, 0x00,
            0xff, 0xff, 0xf0, 0x00,
            0xff, 0xff, 0xf0, 0x00,
            0xff, 0xff, 0xf0, 0x00,
            0xff, 0xff, 0xf0, 0x00,
            0xff, 0xff, 0xf0, 0x00,
            0xff, 0xff, 0xf0, 0x00,
            0xff, 0xff, 0xf0, 0x00,
            0xff, 0xff, 0xf0, 0x00,
            0xff, 0xff, 0xf0, 0x00,
            0xff, 0xff, 0xf0, 0x00,
            0xff, 0xff, 0xf0, 0x00,
            0xff, 0xff, 0xf0, 0x00,
            0xff, 0xff, 0xf0, 0x00,
            0xff, 0xff, 0xf0, 0x00,
            0xff, 0xff, 0xf0, 0x00,
            0xff, 0xff, 0xf0, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
        };

        const infra::Bitmap stopBitmap(stopBitmapData, infra::Vector(32, 28), infra::PixelFormat::blackandwhite);
    }

    ViewStart::ViewStart(BeatController& beatController, infra::Colour backgroundColour)
        : services::ViewPanel::WithView<services::ViewAligned::WithView<services::ViewIcon>>(backgroundColour, startBitmap, infra::Colour::blue)
        , beatController(beatController)
    {}

    void ViewStart::StartTouch(infra::Point point)
    {
        if (beatController.Running())
        {
            beatController.Stop();
            SubView().SubView().Source(startBitmap);
        }
        else
        {
            beatController.Start();
            SubView().SubView().Source(stopBitmap);
        }
    }

    void ViewStart::DragIn(infra::Point point)
    {}

    void ViewStart::DragTo(infra::Point point)
    {}

    void ViewStart::DragOut()
    {}

    void ViewStart::StopTouch()
    {}

    void ViewStart::Swipe(services::Direction direction)
    {}

    services::View& ViewStart::GetView()
    {
        return *this;
    }

}
